#!/usr/bin/env bash

# Exit on first error
set -e

# Execute from dotfiles directory
cd "$(dirname "$0")/.."

# Make it accessible everywhere
export DOTFILES "$(pwd)"

if [ -d "$DOTFILES/bin" ] && [[ ":$PATH:" != *":$DOTFILES/bin:"* ]]; then
  PATH="${PATH:+"$PATH:"}$DOTFILES/bin"
fi

info() {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user() {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success() {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail() {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

link_file() {
  local src=$1 dst=$2
  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]; then
    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]; then
      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]; then
	skip=true
      else
	user " - file already exists: $(basename "$src"), what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
	read -n 1 action

	case "$action" in
	  o )
	    overwrite=true;;
	  O )
	    overwrite_all=true;;
	  b )
	    backup=true;;
	  B )
	    backup_all=true;;
	  s )
	    skip=true;;
	  S )
	    skip_all=true;;
	  * )
	    ;;
	esac
      fi
    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]; then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]; then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]; then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]; then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles() {
	local overwrite_all=$1 backup_all=false skip_all=false

	for source in $(find "$(pwd)" -maxdepth 2 -name '*.symlink*'); do
		split=(${source//-/ })
		destination="$HOME/."

		if [ ${#split[@]} -eq 2 ]; then
			# Target is a specific folder (eg .config, .ssh)
			destination+="${split[1]}/"

			if [ ! -e "$destination" ]; then
				info "creating '.${split[1]}' in home"
				mkdir "$destination"
			fi
		fi

		destination+="$(basename "${source%.*}")"
		link_file "$source" "$destination"
	done
}

install_osfiles() {
	local force=$1
	local dir=$2

	# Ask for the administrator password upfront
	sudo -v

	# Keep-alive: update existing `sudo` time stamp until `bootstrap` has finished
	while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

	source "$dir/index.sh";

	read -p "This may overwrite existing files in your home directory. Are you sure? (y/n) " -n 1;
	echo "";
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		execute;
	fi
}

execute() {
	if [ hash git 2>/dev/null ]; then
		if [ ! git rev-parse --is-inside-work-tree > /dev/null ^&1 ]; then
			info 'setting up git repository'
			git init
			git remote add origin https://github.com/darfink/dotfiles.git
			git fetch
			git reset --hard origin/master
		else
			info 'ensuring the repository is up to date'
			git pull origin master
		fi
	fi

	local force=$1
	local osdir="os/linux"

	if [ "$(uname -s)" = "Darwin" ]; then
		osdir="os/osx"
	fi

	install_dotfiles $force
	install_osfiles $force $osdir

	echo "=========================================="
	echo ""
	echo "Installation complete!"
	echo ""
	echo "=========================================="
}

if [ "$1" == "--force" -o "$1" == "-f" ]; then
	execute true
else
	execute false
fi