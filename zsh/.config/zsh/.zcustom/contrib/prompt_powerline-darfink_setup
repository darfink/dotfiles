#
# 16 Terminal Colors
# -- ---------------
#  0 black
#  1 red
#  2 green
#  3 yellow
#  4 blue
#  5 magenta
#  6 cyan
#  7 white
#  8 bright black
#  9 bright red
# 10 bright green
# 11 bright yellow
# 12 bright blue
# 13 bright magenta
# 14 bright cyan
# 15 bright white
#

# Load dependencies.
pmodload 'helper'

# Define variables.
_prompt_pd_current_bg='NONE'
_prompt_pd_segment_separator=''

function prompt_pd_start_segment {
  local bg fg
  [[ -n "$1" ]] && bg="%K{$1}" || bg="%k"
  [[ -n "$2" ]] && fg="%F{$2}" || fg="%f"
  if [[ "$_prompt_pd_current_bg" != 'NONE' && "$1" != "$_prompt_pd_current_bg" ]]; then
    print -n " $bg%F{$_prompt_pd_current_bg}$_prompt_pd_segment_separator$fg "
  else
    print -n "$bg$fg "
  fi
  _prompt_pd_current_bg="$1"
  [[ -n "$3" ]] && print -n "$3"
}

function prompt_pd_end_segment {
  if [[ -n "$_prompt_pd_current_bg" ]]; then
    print -n " %k%F{$_prompt_pd_current_bg}$_prompt_pd_segment_separator"
  else
    print -n "%k"
  fi
  print -n "%f"
  _prompt_pd_current_bg=''
}

function prompt_pd_build_prompt {
  if [[ -n "$SSH_TTY" ]]; then
    prompt_pd_start_segment 44 white '%F{9}%n%f%F{7}@%f%F{3}%m%f'
  fi

  prompt_pd_start_segment black blue '%(!:%F{yellow}⚡ :)%F{blue}$_prompt_pd_pwd'

  if [[ -n "$_prompt_pd_git" ]]; then
    prompt_pd_start_segment blue white '${_prompt_pd_git}'
  fi

  if [[ -n "$VIRTUAL_ENV" ]]; then
    prompt_pd_start_segment 220 black '  ${VIRTUAL_ENV:t}'
  fi

  prompt_pd_end_segment
}

function prompt_pd_async_callback {
  case $1 in
    prompt_pd_async_git)
      # We can safely split on ':' because it isn't allowed in ref names.
      IFS=':' read _git_target _git_post_target <<<"$3"

      # The target actually contains 3 space separated possibilities, so we need to
      # make sure we grab the first one.
      _git_target=$(coalesce ${(@)${(z)_git_target}})

      if [[ -z "$_git_target" ]]; then
        # No git target detected, flush the git fragment and redisplay the prompt.
        if [[ -n "$_prompt_pd_git" ]]; then
          _prompt_pd_git=''
          zle && zle reset-prompt
        fi
      else
        # Git target detected, update the git fragment and redisplay the prompt.
        _prompt_pd_git="${_git_target}${_git_post_target}"
        zle && zle reset-prompt
      fi
      ;;
  esac
}

function prompt_pd_async_git {
  cd -q "$1"
  if (( $+functions[git-info] )); then
    git-info
    print ${git_info[status]}
  fi
}

function prompt_pd_async_tasks {
  # Initialize async worker. This needs to be done here and not in
  # prompt_pd_setup so the git formatting can be overridden by other prompts.
  if (( !${prompt_prezto_async_init:-0} )); then
    async_start_worker prompt_pd -n
    async_register_callback prompt_pd prompt_pd_async_callback
    typeset -g prompt_prezto_async_init=1
  fi

  # Kill the old process of slow commands if it is still running.
  async_flush_jobs prompt_pd

  # Compute slow commands in the background.
  async_job prompt_pd prompt_pd_async_git "$PWD"
}

function prompt_pd_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Format PWD.
  _prompt_pd_pwd=$(prompt-pwd)

  # Handle updating git data. We also clear the git prompt data if we're in a
  # different git root now.
  if (( $+functions[git-dir] )); then
    local new_git_root="$(git-dir 2> /dev/null)"
    if [[ $new_git_root != $_pd_cur_git_root ]]; then
      _prompt_pd_git=''
      _pd_cur_git_root=$new_git_root
    fi
  fi

  prompt_pd_async_tasks
}

function prompt_pd_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent sp subst)
  _prompt_pd_precmd_async_pid=0
  _prompt_pd_precmd_async_data=$(mktemp "${TMPDIR:-/tmp}/pd-prompt-async-XXXXXXXXXX")

  # Load required functions.
  autoload -Uz add-zsh-hook
  autoload -Uz async && async

  # Add hook for calling git-info before each command.
  add-zsh-hook precmd prompt_pd_precmd

  # Set editor-info parameters.
  zstyle ':prezto:module:editor:info:completing' format '%B%F{7}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format ''
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format '%F{red}%f'
  zstyle ':prezto:module:editor:info:keymap:alternate' format '%B%F{red}%f%b'

  # Set git-info parameters.
  zstyle ':prezto:module:git:info' verbose 'yes'
  zstyle ':prezto:module:git:info:action' format '%F{7}:%f%%B%F{9}%s%f%%b'
  zstyle ':prezto:module:git:info:added' format ' %%B%F{2}✚%f%%b'
  zstyle ':prezto:module:git:info:ahead' format ' %%B%F{13}%f%%b'
  zstyle ':prezto:module:git:info:behind' format ' %%B%F{13}%f%%b'
  zstyle ':prezto:module:git:info:branch' format ' %%B%F{254}%b%f%%b'
  zstyle ':prezto:module:git:info:commit' format ' %%B%F{3}%.7c%f%%b'
  zstyle ':prezto:module:git:info:deleted' format ' %%B%F{1}%f%%b'
  zstyle ':prezto:module:git:info:modified' format ' %%B%F{118}%f%%b'
  zstyle ':prezto:module:git:info:position' format ' %%B%F{13}%p%f%%b'
  zstyle ':prezto:module:git:info:renamed' format ' %%B%F{5}%f%%b'
  zstyle ':prezto:module:git:info:stashed' format ' %%B%F{6}%f%%b'
  zstyle ':prezto:module:git:info:unmerged' format ' %%B%F{3}%f%%b'
  zstyle ':prezto:module:git:info:untracked' format ' %%B%F{81}%f%%b'
  zstyle ':prezto:module:git:info:keys' format \
    'status' '%b %p %c:%s%A%B%S%a%d%m%r%U%u'

  # Set up non-zero return value display
  local show_return="✘ "
  # Default is to show the return value
  if zstyle -T ':prezto:module:prompt' show-return-val; then
    show_return+='%? '
  fi

  # Get the async worker set up
  _pd_cur_git_root=''

  _prompt_pd_git=''
  _prompt_pd_pwd=''

  # Left-side prompt
  PROMPT='${(e)$(prompt_pd_build_prompt)} '

  # Right-side prompt
  RPROMPT+="%(?:: %F{1}${show_return}%f)"                    # Error code
  RPROMPT+='${${TERM_PROGRAM:#^vscode}:+" %B%F{blue}﬏%f%b"}' # Inside VS Code
  RPROMPT+='${VIM:+" %B%F{28}%f%b"}'                        # Inside Vim
  RPROMPT+='%(1j: %F{cyan}:)'                               # Background job
  RPROMPT+='${editor_info[keymap]}'                          # Editor mode

  # Correction prompt
  SPROMPT='zsh: correct %F{1}%R%f to %F{2}%r%f [nyae]? '
}

function prompt_pd_preview {
  local +h PROMPT=''
  local +h RPROMPT=''
  local +h SPROMPT=''

  editor-info 2> /dev/null
  prompt_preview_theme 'pd'
}

prompt_pd_setup "$@"
